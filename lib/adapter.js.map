{"version":3,"sources":["adapter.ts"],"names":[],"mappings":"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","file":"adapter.js","sourcesContent":["/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { getDeviceList, Device, Endpoint, InEndpoint, OutEndpoint, ConfigDescriptor, InterfaceDescriptor, on } from \"usb\";\nimport { USBDevice } from \"./device\";\nimport { USBTransferStatus, USBDirection } from \"./enums\";\nimport { USBControlTransferParameters, USBInTransferResult, USBOutTransferResult, USBConfiguration, USBInterface, USBAlternateInterface, USBEndpoint, USBIsochronousInTransferResult, USBIsochronousOutTransferResult } from \"./interfaces\";\n\n/**\n * @hidden\n */\nconst usb = {\n    LIBUSB_ENDPOINT_IN: 0x80,\n    LIBUSB_REQUEST_GET_DESCRIPTOR: 0x06,\n    LIBUSB_DT_BOS: 0x0f,\n    LIBUSB_DT_BOS_SIZE: 5\n};\n\n/**\n * @hidden\n */\nexport class USBAdapter extends EventEmitter {\n\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    private devices: { [key: string]: { device: Device, url: string }} = {};\n\n    constructor() {\n        super();\n\n        on(\"attach\", device => {\n            this.loadDevice(device)\n            .then(loadedDevice => {\n                if (loadedDevice) {\n                    this.devicetoUSBDevice(loadedDevice.deviceAddress.toString())\n                    .then(usbDevice => {\n                        this.emit(USBAdapter.EVENT_DEVICE_CONNECT, usbDevice);\n                    });\n                }\n            });\n        });\n\n        on(\"detach\", device => {\n            if (device.deviceAddress) {\n                const address = device.deviceAddress.toString();\n                if (this.devices[address]) {\n                    this.emit(USBAdapter.EVENT_DEVICE_DISCONNECT, address);\n                    delete this.devices[address];\n                }\n            }\n        });\n    }\n\n    private loadDevices(): Promise<Array<Device>> {\n        const promises: Array<Promise<Device>> = getDeviceList().map(this.loadDevice.bind(this));\n        return Promise.all(promises);\n    }\n\n    private loadDevice(device: Device): Promise<Device> {\n        return this.getCapabilities(device)\n        .then(capabilities => this.getWebCapability(capabilities))\n        .then(capability => {\n            if (!capability) return null;\n\n            return this.getWebUrl(device, capability)\n            .then(url => {\n                this.devices[device.deviceAddress.toString()] = {\n                    device: device,\n                    url: url\n                };\n                return device;\n            });\n        });\n    }\n\n    private getCapabilities(device: Device): Promise<any> {\n        return new Promise((resolve, reject) => {\n            try {\n                device.open();\n            } catch (_e) {\n                resolve([]);\n            }\n            // device.getCapabilities((error, capabilities) => {\n            this.getDeviceCapabilities(device, (error, capabilities) => {\n                device.close();\n                if (error) return reject(error);\n                resolve(capabilities);\n            });\n        });\n    }\n\n    private getDeviceCapabilities(device: Device, callback: (error: string, capabilities: any) => any) {\n        const capabilities = [];\n\n        this.getBosDescriptor(device, (error, descriptor) => {\n            if (error) return callback(error, null);\n\n            const len = descriptor ? descriptor.capabilities.length : 0;\n            for (let i = 0; i < len; i++) {\n                capabilities.push({\n                    device: device,\n                    id: i,\n                    descriptor: descriptor.capabilities[i],\n                    type: descriptor.capabilities[i].bDevCapabilityType,\n                    data: descriptor.capabilities[i].dev_capability_data\n                });\n            }\n\n            callback(undefined, capabilities);\n        });\n    }\n\n    private getBosDescriptor(device: Device, callback: (error: string, descriptor: any) => any) {\n\n        if (device.deviceDescriptor.bcdUSB < 0x201) {\n            // BOS is only supported from USB 2.0.1\n            return callback(undefined, null);\n        }\n\n        device.controlTransfer(\n            usb.LIBUSB_ENDPOINT_IN,\n            usb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n            (usb.LIBUSB_DT_BOS << 8),\n            0,\n            usb.LIBUSB_DT_BOS_SIZE,\n            (error1, buffer1) => {\n                if (error1) return callback(undefined, null);\n\n                const totalLength = buffer1.readUInt16LE(2);\n                device.controlTransfer(\n                    usb.LIBUSB_ENDPOINT_IN,\n                    usb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n                    (usb.LIBUSB_DT_BOS << 8),\n                    0,\n                    totalLength,\n                    (error, buffer) => {\n                        if (error) return callback(undefined, null);\n\n                        const descriptor = {\n                            bLength: buffer.readUInt8(0),\n                            bDescriptorType: buffer.readUInt8(1),\n                            wTotalLength: buffer.readUInt16LE(2),\n                            bNumDeviceCaps: buffer.readUInt8(4),\n                            capabilities: []\n                        };\n\n                        let i = usb.LIBUSB_DT_BOS_SIZE;\n                        while (i < descriptor.wTotalLength) {\n                            const capability: any = {\n                                bLength: buffer.readUInt8(i + 0),\n                                bDescriptorType: buffer.readUInt8(i + 1),\n                                bDevCapabilityType: buffer.readUInt8(i + 2)\n                            };\n\n                            capability.dev_capability_data = buffer.slice(i + 3, i + capability.bLength);\n                            descriptor.capabilities.push(capability);\n                            i += capability.bLength;\n                        }\n\n                        // Cache descriptor\n                        callback(undefined, descriptor);\n                    }\n                );\n            }\n        );\n    }\n\n    private getWebCapability(capabilities: any): any {\n        const platformCapabilities = capabilities.filter(capability => {\n            return capability.type === 5;\n        });\n\n        const webCapability = platformCapabilities.find(capability => {\n            const version = capability.data.readUInt16LE(17);\n            return version === 256;\n\n            // var uuid = unparse(data, 1);//.readUInt16LE(1);\n            // console.log(uuid); // {3408b638-09a9-47a0-8bfd-a0768815b665}\n        });\n\n        return webCapability;\n    }\n\n    private getWebUrl(device: Device, capability: any): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (!capability || !capability.data || capability.data.byteLength < 20) return null;\n\n            const REQUEST_TYPE = 0xC0;\n            const GET_URL = 2;\n\n            const vendor = capability.data.readUInt8(19);\n            const page = capability.data.readUInt8(20);\n\n            device.open();\n            device.controlTransfer(REQUEST_TYPE, vendor, page, GET_URL, 64, (error, buffer) => {\n                device.close();\n                if (error) return reject(error);\n\n                // const length = buffer.readUInt8(0);\n                // const type = buffer.readUInt8(1);\n                let url = buffer.toString(\"utf8\", 3);\n\n                const scheme = buffer.readUInt8(2); // 0 - http, 1 - https, 255 - in url\n                if (scheme === 0) url = \"http://\" + url;\n                if (scheme === 1) url = \"https://\" + url;\n\n                resolve(url);\n            });\n        });\n    }\n\n    private devicetoUSBDevice(handle: string): Promise<USBDevice> {\n        return new Promise((resolve, _reject) => {\n            const device = this.devices[handle].device;\n            const url = this.devices[handle].url;\n\n            if (!device.deviceDescriptor) {\n                return resolve(new USBDevice({\n                    _handle: device.deviceAddress.toString(),\n                    url: url\n                }));\n            }\n\n            const descriptor = device.deviceDescriptor;\n            const deviceVersion = this.decodeVersion(descriptor.bcdDevice);\n            const usbVersion = this.decodeVersion(descriptor.bcdUSB);\n            let manufacturerName = null;\n            let productName = null;\n\n            return this.getStringDescriptor(device, descriptor.iManufacturer)\n            .then(name => {\n                manufacturerName = name;\n                return this.getStringDescriptor(device, descriptor.iProduct);\n            })\n            .then(name => {\n                productName = name;\n                return this.getStringDescriptor(device, descriptor.iSerialNumber);\n            })\n            .then(serialNumber => {\n                const props: Partial<USBDevice> = {\n                    _handle: device.deviceAddress.toString(),\n                    url: url,\n                    deviceClass: descriptor.bDeviceClass,\n                    deviceSubclass: descriptor.bDeviceSubClass,\n                    deviceProtocol: descriptor.bDeviceProtocol,\n                    productId: descriptor.idProduct,\n                    vendorId: descriptor.idVendor,\n                    deviceVersionMajor: deviceVersion.major,\n                    deviceVersionMinor: deviceVersion.minor,\n                    deviceVersionSubminor: deviceVersion.sub,\n                    usbVersionMajor: usbVersion.major,\n                    usbVersionMinor: usbVersion.minor,\n                    usbVersionSubminor: usbVersion.sub,\n                    manufacturerName: manufacturerName,\n                    productName: productName,\n                    serialNumber: serialNumber\n                };\n                return resolve(new USBDevice(props));\n            });\n        });\n    }\n\n    private decodeVersion(version: number): { [key: string]: number } {\n        const hex = `0000${version.toString(16)}`.slice(-4);\n        return {\n            major: parseInt(hex.substr(0, 2), null),\n            minor: parseInt(hex.substr(2, 1), null),\n            sub: parseInt(hex.substr(3, 1), null),\n        };\n    }\n\n    private getStringDescriptor(device: Device, index: number): Promise<string> {\n        return new Promise((resolve, reject) => {\n            device.open();\n            device.getStringDescriptor(index, (error, buffer) => {\n                device.close();\n                if (error) return reject(error);\n                resolve(buffer.toString());\n            });\n        });\n    }\n\n    private bufferToDataView(buffer): DataView {\n        // Buffer to ArrayBuffer\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private bufferSourceToBuffer(bufferSource: ArrayBuffer | ArrayBufferView): Buffer {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(bufferSource) ? bufferSource.buffer : bufferSource;\n        return this.arrayBufferToBuffer(arrayBuffer);\n    }\n\n    private arrayBufferToBuffer(arrayBuffer: ArrayBuffer): Buffer {\n        return new Buffer(arrayBuffer);\n    }\n/*\n    private dataViewToBuffer(dataView) {\n        // DataView to TypedArray\n        const typedArray = new Uint8Array(dataView.buffer);\n        return new Buffer(typedArray);\n    }\n*/\n    private getEndpoint(device: Device, endpointNumber: number): Endpoint {\n        let endpoint: Endpoint = null;\n\n        device.interfaces.some(iface => {\n            const epoint = iface.endpoint(endpointNumber);\n\n            if (epoint) {\n                endpoint = epoint;\n                return true;\n            }\n        });\n\n        return endpoint;\n    }\n\n    private getInEndpoint(device: Device, endpointNumber: number): InEndpoint {\n        const endpoint = this.getEndpoint(device, endpointNumber);\n        if (endpoint && endpoint.direction === \"in\") return (endpoint as InEndpoint);\n    }\n\n    private getOutEndpoint(device: Device, endpointNumber: number): OutEndpoint {\n        const endpoint = this.getEndpoint(device, endpointNumber);\n        if (endpoint && endpoint.direction === \"out\") return (endpoint as OutEndpoint);\n    }\n\n    private endpointToUSBEndpoint(endpoint: Endpoint): USBEndpoint {\n        return {\n            endpointNumber: endpoint.descriptor.bEndpointAddress,\n            direction: endpoint.direction === \"in\" ? \"in\" : \"out\",\n            type: endpoint.descriptor.bDescriptorType,\n            packetSize: endpoint.descriptor.wMaxPacketSize\n        };\n    }\n\n    private interfaceToUSBAlternateInterface(iface: InterfaceDescriptor): USBAlternateInterface {\n        return {\n            alternateSetting: iface.bAlternateSetting,\n            interfaceClass: iface.bInterfaceClass,\n            interfaceSubclass: iface.bInterfaceSubClass,\n            interfaceProtocol: iface.bInterfaceProtocol,\n            interfaceName: \"unknown\",\n            endpoints: []  // iface.endpoints.map(this.endpointToUSBEndpoint)\n        };\n    }\n\n    private interfacesToUSBInterface(interfaces: Array<InterfaceDescriptor>): USBInterface {\n        const alternate = interfaces.find(iface => iface.bAlternateSetting === 0);\n\n        return {\n            interfaceNumber: alternate.bInterfaceNumber,\n            alternate: this.interfaceToUSBAlternateInterface(alternate),\n            alternates: interfaces.map(this.interfaceToUSBAlternateInterface),\n            claimed: false // iface.descriptor\n        };\n    }\n\n    private configDescriptorToUSBConfiguration(descriptor: ConfigDescriptor): USBConfiguration {\n        // tslint:disable-next-line:no-string-literal\n        const allInterfaces: Array<Array<InterfaceDescriptor>> = descriptor[\"interfaces\"] || [];\n\n        return {\n            configurationValue: descriptor.bConfigurationValue,\n            configurationName: \"unknown\",\n            interfaces: allInterfaces.map(interfaces => this.interfacesToUSBInterface(interfaces))\n        };\n    }\n\n    private getDevice(handle: string): Device {\n        return this.devices[handle].device;\n    }\n\n    public getUSBDevices(): Promise<Array<USBDevice>> {\n        return this.loadDevices()\n        .then(() => {\n            const promises: Array<Promise<USBDevice>> = Object.keys(this.devices).map(key => this.devicetoUSBDevice(key));\n            return Promise.all(promises);\n        });\n    }\n\n    public open(handle: string): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.open();\n            resolve();\n        });\n    }\n\n    public close(handle: string): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.close();\n            resolve();\n        });\n    }\n\n    public getOpened(handle: string): boolean {\n        const device = this.getDevice(handle);\n        return (device.interfaces !== null);\n    }\n\n    public getConfiguration(handle: string): USBConfiguration {\n        const device = this.getDevice(handle);\n        const config: USBConfiguration = this.configDescriptorToUSBConfiguration(device.configDescriptor);\n\n        config.interfaces.forEach(iface => {\n            const endpoints = device.interface(iface.interfaceNumber).endpoints.map(this.endpointToUSBEndpoint);\n            iface.alternate.endpoints = endpoints;\n            iface.alternates.find(alt => alt.alternateSetting === iface.alternate.alternateSetting).endpoints = endpoints;\n        });\n        return config;\n    }\n\n    public getConfigurations(handle: string): Array<USBConfiguration> {\n        // tslint:disable-next-line:no-string-literal\n        const configs: Array<ConfigDescriptor> = handle[\"allConfigDescriptors\"];\n\n        return configs.map(config => {\n            return this.configDescriptorToUSBConfiguration(config);\n        });\n    }\n\n    public selectConfiguration(handle: string, id: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            device.setConfiguration(id, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public claimInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.interface(address).claim();\n            resolve();\n        });\n    }\n\n    public releaseInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            // device.interface(address).release(true, error => {\n            device.interface(address).release(error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const iface = device.interface(interfaceNumber);\n            if (!iface) return reject(\"selectAlternateInterface error\");\n\n            iface.setAltSetting(alternateSetting, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = (setup.recipient | setup.requestType | 0x80);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, length, (error, buffer) => {\n                if (error) return reject(error);\n                resolve({\n                    data: this.bufferToDataView(buffer),\n                    status: USBTransferStatus.ok\n                });\n            });\n        });\n    }\n\n    public controlTransferOut(handle: string, setup: USBControlTransferParameters, data: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = (setup.recipient | setup.requestType | 0x00);\n            const buffer = this.bufferSourceToBuffer(data);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, buffer, error => {\n                if (error) return reject(error);\n                resolve({\n                    bytesWritten: buffer.byteLength,\n                    status: USBTransferStatus.ok\n                });\n            });\n        });\n    }\n\n    public transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getInEndpoint(device, endpointNumber);\n\n            endpoint.transfer(length, (error, data) => {\n                if (error) return reject(error);\n                resolve({\n                    data: this.bufferToDataView(data),\n                    status: USBTransferStatus.ok\n                });\n            });\n        });\n    }\n\n    public transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getOutEndpoint(device, endpointNumber);\n            const buffer = this.bufferSourceToBuffer(data);\n\n            endpoint.transfer(buffer, error => {\n                if (error) return reject(error);\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack\n                    status: USBTransferStatus.ok\n                });\n            });\n        });\n    }\n\n    public clearHalt(_handle: string, _direction: USBDirection, _endpointNumber: number): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            reject(\"error: method not implemented\");\n        });\n    }\n\n    public isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferIn error: method not implemented\");\n        });\n    }\n\n    public isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferOut error: method not implemented\");\n        });\n    }\n\n    public reset(handle: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            device.reset(error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n}\n\n/**\n * @hidden\n */\nexport const adapter = new USBAdapter();\n"],"sourceRoot":"../src"}