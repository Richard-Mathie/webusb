{"version":3,"sources":["usb.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF,6CAA+C;AAC/C,qCAAqC;AAErC,uCAAoC;AAEpC;;GAEG;AACH,SAAiB,SAAQ,4BAAe;IAapC;;;OAGG;IACH;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACI,UAAU;QACb,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;YACpC,iBAAO,CAAC,WAAW,EAAE;iBACpB,IAAI,CAAC,YAAY,CAAC,EAAE;gBACjB,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,kBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,aAAa,CAAC,QAAiC;QAClD,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;YACpC,iBAAO,CAAC,WAAW,EAAE;iBACpB,IAAI,CAAC,YAAY,CAAC,EAAE;gBACjB,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBACtC,MAAM,CAAC,IAAI,kBAAS,CAAC,MAAM,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;gBAEH,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;;AAhDD;;;GAGG;AACW,wBAAoB,GAAW,SAAS,CAAC;AAEvD;;;GAGG;AACW,2BAAuB,GAAW,YAAY,CAAC;AAXjE,kBAkDC","file":"usb.js","sourcesContent":["/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { USBDevice } from \"./device\";\nimport { USBDeviceRequestOptions } from \"./interfaces\";\nimport { adapter } from \"./adapter\";\n\n/**\n * USB class\n */\nexport class USB extends EventDispatcher {\n    /**\n     * Device Connected event\n     * @event\n     */\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n\n    /**\n     * Device Disconnected event\n     * @event\n     */\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    /**\n     * USB constructor\n     * @param init A partial class to initialise values\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Gets all Web USB devices connected to the system\n     * @returns Promise containing an array of devices\n     */\n    public getDevices(): Promise<Array<USBDevice>> {\n        return new Promise((resolve, _reject) => {\n            adapter.findDevices()\n            .then(foundDevices => {\n                resolve(foundDevices.map(device => new USBDevice(device)));\n            });\n        });\n    }\n\n    /**\n     * Requests a sungle Web USB device\n     * @returns Promise containing the selected device\n     */\n    public requestDevice(_options: USBDeviceRequestOptions): Promise<USBDevice> {\n        return new Promise((resolve, _reject) => {\n            adapter.findDevices()\n            .then(foundDevices => {\n                const devices = foundDevices.map(device => {\n                    return new USBDevice(device);\n                });\n\n                resolve(devices[0]);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}