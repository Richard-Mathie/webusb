{"version":3,"sources":["usb.ts"],"names":[],"mappings":"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","file":"usb.js","sourcesContent":["/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { USBDevice } from \"./device\";\nimport { USBOptions, USBDeviceRequestOptions } from \"./interfaces\";\nimport { adapter } from \"./adapter\";\n\n/**\n * USB class\n */\nexport class USB extends EventDispatcher {\n    /**\n     * Device Connected event\n     * @event\n     */\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n\n    /**\n     * Device Disconnected event\n     * @event\n     */\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    private devicesFound: (devices: Array<USBDevice>, selectFn: (device: USBDevice) => void) => USBDevice = null;\n\n    /**\n     * USB constructor\n     * @param options USB initialisation options\n     */\n    constructor(options?: USBOptions) {\n        super();\n\n        options = options || {};\n        this.devicesFound = options.devicesFound;\n    }\n\n    private filterDevice(options: USBDeviceRequestOptions, device: USBDevice): boolean {\n        return options.filters.every(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.vendorId) return;\n\n            // Product\n            if (filter.productId && filter.productId !== device.productId) return;\n\n            // Class\n            if (filter.classCode && filter.classCode !== device.deviceClass) return;\n\n            // Subclass\n            if (filter.subclassCode && filter.subclassCode !== device.deviceSubclass) return;\n\n            // Protocol\n            if (filter.protocolCode && filter.protocolCode !== device.deviceProtocol) return;\n\n            // Serial\n            if (filter.serialnumber && filter.serialnumber !== device.serialNumber) return;\n\n            return true;\n        });\n    }\n\n    /**\n     * Gets all Web USB devices connected to the system\n     * @returns Promise containing an array of devices\n     */\n    public getDevices(): Promise<Array<USBDevice>> {\n        return new Promise((resolve, _reject) => {\n            adapter.findDevices()\n            .then(foundDevices => {\n                resolve(foundDevices.map(device => new USBDevice(device)));\n            });\n        });\n    }\n\n    /**\n     * Requests a single Web USB device\n     * @param options The options to use when scanning\n     * @returns Promise containing the selected device\n     */\n    public requestDevice(options: USBDeviceRequestOptions): Promise<USBDevice> {\n        return new Promise((resolve, reject) => {\n            options = options || {\n                filters: []\n            };\n\n            // Must have a filter\n            if (!options.filters || options.filters.length === 0) {\n                return reject(new TypeError(\"requestDevice error: no filters specified\"));\n            }\n\n            // Don't allow empty filters\n            const emptyFilter = options.filters.some(filter => {\n                return (Object.keys(filter).length === 0);\n            });\n            if (emptyFilter) {\n                return reject(new TypeError(\"requestDevice error: empty filter specified\"));\n            }\n\n            return this.getDevices()\n            .then(devices => {\n                devices = devices.filter(device => this.filterDevice(options, device));\n                // If no deviceFound function, resolve with the first device found\n                if (!this.devicesFound) return resolve(devices[0]);\n\n                function selectFn(device: USBDevice) {\n                    resolve(device);\n                }\n\n                const selectedDevice = this.devicesFound(devices, selectFn.bind(this));\n                if (selectedDevice) resolve(selectedDevice);\n            }).catch(error => {\n                reject(`requestDevice error: ${error}`);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}