{"version":3,"sources":["interfaces.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE","file":"interfaces.js","sourcesContent":["/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBRequestType, USBRecipient, USBTransferStatus, USBDirection, USBEndpointType } from \"./enums\";\nimport { USBDevice } from \"./device\";\n\n/**\n * USB Options interface\n */\nexport interface USBOptions {\n    /**\n     * A `device found` callback function to allow the user to select a device\n     */\n    devicesFound?: (devices: Array<USBDevice>, selectFn: (device: USBDevice) => void) => USBDevice;\n}\n\nexport interface USBDeviceFilter {\n    vendorId?: number;\n    productId?: number;\n    classCode?: number;\n    subclassCode?: number;\n    protocolCode?: number;\n    serialnumber?: string;\n}\n\nexport interface USBDeviceRequestOptions {\n    filters: Array<USBDeviceFilter>;\n    deviceFound?: (device: USBDevice, selectFn: any) => void;\n}\n\nexport interface USBControlTransferParameters {\n    requestType: USBRequestType;\n    recipient: USBRecipient;\n    request: number;\n    value: number;\n    index: number;\n}\n\nexport interface USBInTransferResult {\n    data?: DataView;\n    status: USBTransferStatus;\n}\n\nexport interface USBOutTransferResult {\n    bytesWritten: number;\n    status: USBTransferStatus;\n}\n\nexport interface USBIsochronousInTransferPacket {\n    data?: DataView;\n    status: USBTransferStatus;\n}\n\nexport interface USBIsochronousInTransferResult {\n    data?: DataView;\n    packets: Array<USBIsochronousInTransferPacket>;\n}\n\nexport interface USBIsochronousOutTransferPacket {\n    bytesWritten: number;\n    status: USBTransferStatus;\n}\n\nexport interface USBIsochronousOutTransferResult {\n    packets: Array<USBIsochronousOutTransferPacket>;\n}\n\nexport interface USBConfiguration {\n    configurationValue: number;\n    configurationName?: string;\n    interfaces: Array<USBInterface>;\n}\n\nexport interface USBInterface {\n    interfaceNumber: number;\n    alternate: USBAlternateInterface;\n    alternates: Array<USBAlternateInterface>;\n    claimed: boolean;\n}\n\nexport interface USBAlternateInterface {\n    alternateSetting: number;\n    interfaceClass: number;\n    interfaceSubclass: number;\n    interfaceProtocol: number;\n    interfaceName?: string;\n    endpoints: Array<USBEndpoint>;\n}\n\nexport interface USBEndpoint {\n    endpointNumber: number;\n    direction: USBDirection;\n    type: USBEndpointType;\n    packetSize: number;\n}\n"],"sourceRoot":"../src"}